// Start of user code Copyright
/*******************************************************************************
 * Copyright (c) 2012 IBM Corporation and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Russell Boykin       - initial API and implementation
 *     Alberto Giammaria    - initial API and implementation
 *     Chris Peters         - initial API and implementation
 *     Gianluca Bernardini  - initial API and implementation
 *       Sam Padgett          - initial API and implementation
 *     Michael Fiedler      - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (422448)
 *     Matthieu Helleboid   - Support for multiple Service Providers.
 *     Anass Radouani       - Support for multiple Service Providers.
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// End of user code

package org.oasis.oslcop.sysml;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Iterator;

import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.exception.OslcCoreApplicationException;
import org.eclipse.lyo.oslc4j.core.annotation.OslcAllowedValue;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDescription;
import org.eclipse.lyo.oslc4j.core.annotation.OslcMemberProperty;
import org.eclipse.lyo.oslc4j.core.annotation.OslcName;
import org.eclipse.lyo.oslc4j.core.annotation.OslcNamespace;
import org.eclipse.lyo.oslc4j.core.annotation.OslcOccurs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcPropertyDefinition;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRdfCollectionType;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRange;
import org.eclipse.lyo.oslc4j.core.annotation.OslcReadOnly;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRepresentation;
import org.eclipse.lyo.oslc4j.core.annotation.OslcResourceShape;
import org.eclipse.lyo.oslc4j.core.annotation.OslcTitle;
import org.eclipse.lyo.oslc4j.core.annotation.OslcValueType;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.Occurs;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.Representation;
import org.eclipse.lyo.oslc4j.core.model.ValueType;
import org.eclipse.lyo.oslc4j.core.model.ResourceShape;
import org.eclipse.lyo.oslc4j.core.model.ResourceShapeFactory;

import org.oasis.oslcop.sysml.SysmlDomainConstants;
import org.oasis.oslcop.sysml.Element;

import org.oasis.oslcop.sysml.SysmlDomainConstants;

import org.oasis.oslcop.sysml.Annotation;
import org.oasis.oslcop.sysml.Element;
import org.oasis.oslcop.sysml.Membership;
import org.oasis.oslcop.sysml.SysmlPackage;
import org.oasis.oslcop.sysml.Relationship;
// Start of user code imports
// End of user code

// Start of user code preClassCode
// End of user code

// Start of user code classAnnotations
// End of user code
@OslcNamespace(SysmlDomainConstants.COMMENT_NAMESPACE)
@OslcName(SysmlDomainConstants.COMMENT_LOCALNAME)
@OslcResourceShape(title = "Comment Resource Shape", describes = SysmlDomainConstants.COMMENT_TYPE)
public class Comment
    extends Element
    implements IComment
{
    // Start of user code attributeAnnotation:body
    // End of user code
    private String body;
    // Start of user code attributeAnnotation:commentedElement
    // End of user code
    private Link commentedElement;
    // Start of user code attributeAnnotation:annotationForComment
    // End of user code
    private Link annotationForComment;
    
    // Start of user code classAttributes
    // End of user code
    // Start of user code classMethods
    // End of user code
    public Comment()
    {
        super();
    
        // Start of user code constructor1
        // End of user code
    }
    
    public Comment(final URI about)
    {
        super(about);
    
        // Start of user code constructor2
        // End of user code
    }
    
    public static ResourceShape createResourceShape() throws OslcCoreApplicationException, URISyntaxException {
        return ResourceShapeFactory.createResourceShape(OSLC4JUtils.getServletURI(),
        OslcConstants.PATH_RESOURCE_SHAPES,
        SysmlDomainConstants.COMMENT_PATH,
        Comment.class);
    }
    
    
    public String toString()
    {
        return toString(false);
    }
    
    public String toString(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toString_init
        // End of user code
    
        if (asLocalResource) {
            result = result + "{a Local Comment Resource} - update Comment.toString() to present resource as desired.";
            // Start of user code toString_bodyForLocalResource
            // End of user code
        }
        else {
            result = String.valueOf(getAbout());
        }
    
        // Start of user code toString_finalize
        // End of user code
    
        return result;
    }
    
    
    // Start of user code getterAnnotation:body
    // End of user code
    @OslcName("body")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "body")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(false)
    public String getBody()
    {
        // Start of user code getterInit:body
        // End of user code
        return body;
    }
    
    // Start of user code getterAnnotation:commentedElement
    // End of user code
    @OslcName("commentedElement")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "commentedElement")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.ELEMENT_TYPE})
    @OslcReadOnly(false)
    public Link getCommentedElement()
    {
        // Start of user code getterInit:commentedElement
        // End of user code
        return commentedElement;
    }
    
    // Start of user code getterAnnotation:annotationForComment
    // End of user code
    @OslcName("annotationForComment")
    @OslcPropertyDefinition(SysmlDomainConstants.SYSML_NAMSPACE + "annotationForComment")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Resource)
    @OslcRange({SysmlDomainConstants.ANNOTATION_TYPE})
    @OslcReadOnly(false)
    public Link getAnnotationForComment()
    {
        // Start of user code getterInit:annotationForComment
        // End of user code
        return annotationForComment;
    }
    
    
    // Start of user code setterAnnotation:body
    // End of user code
    public void setBody(final String body )
    {
        // Start of user code setterInit:body
        // End of user code
        this.body = body;
    
        // Start of user code setterFinalize:body
        // End of user code
    }
    
    // Start of user code setterAnnotation:commentedElement
    // End of user code
    public void setCommentedElement(final Link commentedElement )
    {
        // Start of user code setterInit:commentedElement
        // End of user code
        this.commentedElement = commentedElement;
    
        // Start of user code setterFinalize:commentedElement
        // End of user code
    }
    
    // Start of user code setterAnnotation:annotationForComment
    // End of user code
    public void setAnnotationForComment(final Link annotationForComment )
    {
        // Start of user code setterInit:annotationForComment
        // End of user code
        this.annotationForComment = annotationForComment;
    
        // Start of user code setterFinalize:annotationForComment
        // End of user code
    }
    
    
}
